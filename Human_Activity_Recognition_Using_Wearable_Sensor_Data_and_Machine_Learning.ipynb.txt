{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": []
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "_VbrWH-J0c36"
      },
      "outputs": [],
      "source": [
        "import pandas as pd\n",
        "import numpy as np\n",
        "from sklearn.preprocessing import StandardScaler\n",
        "from sklearn.tree import DecisionTreeClassifier\n",
        "from sklearn.ensemble import RandomForestClassifier\n",
        "from sklearn.svm import SVC\n",
        "from sklearn.neighbors import KNeighborsClassifier\n",
        "from sklearn.metrics import accuracy_score\n",
        "from sklearn.model_selection import train_test_split\n",
        "from sklearn.metrics import accuracy_score, classification_report\n",
        "from sklearn.model_selection import cross_val_score\n",
        "import joblib\n",
        "import matplotlib.pyplot as plt\n",
        "import seaborn as sns\n",
        "from scipy import stats\n",
        "import statsmodels.api as sm\n",
        "from sklearn.feature_selection import f_classif\n"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Load the training dataset\n",
        "train_data = pd.read_csv('datasetkaggle1.csv')"
      ],
      "metadata": {
        "id": "Yrzo7Ouw0l0Y"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# Display the first few rows of the dataset\n",
        "print(train_data.head())"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "fSwclMlG0l2w",
        "outputId": "8d15323e-8960-40fb-ffaa-2f6f430edbc9"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "   tBodyAcc-mean()-X  tBodyAcc-mean()-Y  tBodyAcc-mean()-Z  tBodyAcc-std()-X  \\\n",
            "0           0.288585          -0.020294          -0.132905         -0.995279   \n",
            "1           0.278419          -0.016411          -0.123520         -0.998245   \n",
            "2           0.279653          -0.019467          -0.113462         -0.995380   \n",
            "3           0.279174          -0.026201          -0.123283         -0.996091   \n",
            "4           0.276629          -0.016570          -0.115362         -0.998139   \n",
            "\n",
            "   tBodyAcc-std()-Y  tBodyAcc-std()-Z  tBodyAcc-mad()-X  tBodyAcc-mad()-Y  \\\n",
            "0         -0.983111         -0.913526         -0.995112         -0.983185   \n",
            "1         -0.975300         -0.960322         -0.998807         -0.974914   \n",
            "2         -0.967187         -0.978944         -0.996520         -0.963668   \n",
            "3         -0.983403         -0.990675         -0.997099         -0.982750   \n",
            "4         -0.980817         -0.990482         -0.998321         -0.979672   \n",
            "\n",
            "   tBodyAcc-mad()-Z  tBodyAcc-max()-X  ...  fBodyBodyGyroJerkMag-kurtosis()  \\\n",
            "0         -0.923527         -0.934724  ...                        -0.710304   \n",
            "1         -0.957686         -0.943068  ...                        -0.861499   \n",
            "2         -0.977469         -0.938692  ...                        -0.760104   \n",
            "3         -0.989302         -0.938692  ...                        -0.482845   \n",
            "4         -0.990441         -0.942469  ...                        -0.699205   \n",
            "\n",
            "   angle(tBodyAccMean,gravity)  angle(tBodyAccJerkMean),gravityMean)  \\\n",
            "0                    -0.112754                              0.030400   \n",
            "1                     0.053477                             -0.007435   \n",
            "2                    -0.118559                              0.177899   \n",
            "3                    -0.036788                             -0.012892   \n",
            "4                     0.123320                              0.122542   \n",
            "\n",
            "   angle(tBodyGyroMean,gravityMean)  angle(tBodyGyroJerkMean,gravityMean)  \\\n",
            "0                         -0.464761                             -0.018446   \n",
            "1                         -0.732626                              0.703511   \n",
            "2                          0.100699                              0.808529   \n",
            "3                          0.640011                             -0.485366   \n",
            "4                          0.693578                             -0.615971   \n",
            "\n",
            "   angle(X,gravityMean)  angle(Y,gravityMean)  angle(Z,gravityMean)  subject  \\\n",
            "0             -0.841247              0.179941             -0.058627        1   \n",
            "1             -0.844788              0.180289             -0.054317        1   \n",
            "2             -0.848933              0.180637             -0.049118        1   \n",
            "3             -0.848649              0.181935             -0.047663        1   \n",
            "4             -0.847865              0.185151             -0.043892        1   \n",
            "\n",
            "   Activity  \n",
            "0  STANDING  \n",
            "1  STANDING  \n",
            "2  STANDING  \n",
            "3  STANDING  \n",
            "4  STANDING  \n",
            "\n",
            "[5 rows x 563 columns]\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Get the dimensions of the dataset (rows, columns)\n",
        "print(\"Shape:\", train_data.shape)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "JfBNVWKX0l5K",
        "outputId": "186a55c1-049b-4816-cf85-7e0e9b90502b"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Shape: (7352, 563)\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "\n",
        "# Get statistical summary of the dataset\n",
        "print(train_data.describe())"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "CxWrxla30l7o",
        "outputId": "3145d5cd-af33-4833-80fb-0d82412ccfc1"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "       tBodyAcc-mean()-X  tBodyAcc-mean()-Y  tBodyAcc-mean()-Z  \\\n",
            "count        7352.000000        7352.000000        7352.000000   \n",
            "mean            0.274488          -0.017695          -0.109141   \n",
            "std             0.070261           0.040811           0.056635   \n",
            "min            -1.000000          -1.000000          -1.000000   \n",
            "25%             0.262975          -0.024863          -0.120993   \n",
            "50%             0.277193          -0.017219          -0.108676   \n",
            "75%             0.288461          -0.010783          -0.097794   \n",
            "max             1.000000           1.000000           1.000000   \n",
            "\n",
            "       tBodyAcc-std()-X  tBodyAcc-std()-Y  tBodyAcc-std()-Z  tBodyAcc-mad()-X  \\\n",
            "count       7352.000000       7352.000000       7352.000000       7352.000000   \n",
            "mean          -0.605438         -0.510938         -0.604754         -0.630512   \n",
            "std            0.448734          0.502645          0.418687          0.424073   \n",
            "min           -1.000000         -0.999873         -1.000000         -1.000000   \n",
            "25%           -0.992754         -0.978129         -0.980233         -0.993591   \n",
            "50%           -0.946196         -0.851897         -0.859365         -0.950709   \n",
            "75%           -0.242813         -0.034231         -0.262415         -0.292680   \n",
            "max            1.000000          0.916238          1.000000          1.000000   \n",
            "\n",
            "       tBodyAcc-mad()-Y  tBodyAcc-mad()-Z  tBodyAcc-max()-X  ...  \\\n",
            "count       7352.000000       7352.000000       7352.000000  ...   \n",
            "mean          -0.526907         -0.606150         -0.468604  ...   \n",
            "std            0.485942          0.414122          0.544547  ...   \n",
            "min           -1.000000         -1.000000         -1.000000  ...   \n",
            "25%           -0.978162         -0.980251         -0.936219  ...   \n",
            "50%           -0.857328         -0.857143         -0.881637  ...   \n",
            "75%           -0.066701         -0.265671         -0.017129  ...   \n",
            "max            0.967664          1.000000          1.000000  ...   \n",
            "\n",
            "       fBodyBodyGyroJerkMag-skewness()  fBodyBodyGyroJerkMag-kurtosis()  \\\n",
            "count                      7352.000000                      7352.000000   \n",
            "mean                         -0.307009                        -0.625294   \n",
            "std                           0.321011                         0.307584   \n",
            "min                          -0.995357                        -0.999765   \n",
            "25%                          -0.542602                        -0.845573   \n",
            "50%                          -0.343685                        -0.711692   \n",
            "75%                          -0.126979                        -0.503878   \n",
            "max                           0.989538                         0.956845   \n",
            "\n",
            "       angle(tBodyAccMean,gravity)  angle(tBodyAccJerkMean),gravityMean)  \\\n",
            "count                  7352.000000                           7352.000000   \n",
            "mean                      0.008684                              0.002186   \n",
            "std                       0.336787                              0.448306   \n",
            "min                      -0.976580                             -1.000000   \n",
            "25%                      -0.121527                             -0.289549   \n",
            "50%                       0.009509                              0.008943   \n",
            "75%                       0.150865                              0.292861   \n",
            "max                       1.000000                              1.000000   \n",
            "\n",
            "       angle(tBodyGyroMean,gravityMean)  angle(tBodyGyroJerkMean,gravityMean)  \\\n",
            "count                       7352.000000                           7352.000000   \n",
            "mean                           0.008726                             -0.005981   \n",
            "std                            0.608303                              0.477975   \n",
            "min                           -1.000000                             -1.000000   \n",
            "25%                           -0.482273                             -0.376341   \n",
            "50%                            0.008735                             -0.000368   \n",
            "75%                            0.506187                              0.359368   \n",
            "max                            0.998702                              0.996078   \n",
            "\n",
            "       angle(X,gravityMean)  angle(Y,gravityMean)  angle(Z,gravityMean)  \\\n",
            "count           7352.000000           7352.000000           7352.000000   \n",
            "mean              -0.489547              0.058593             -0.056515   \n",
            "std                0.511807              0.297480              0.279122   \n",
            "min               -1.000000             -1.000000             -1.000000   \n",
            "25%               -0.812065             -0.017885             -0.143414   \n",
            "50%               -0.709417              0.182071              0.003181   \n",
            "75%               -0.509079              0.248353              0.107659   \n",
            "max                1.000000              0.478157              1.000000   \n",
            "\n",
            "           subject  \n",
            "count  7352.000000  \n",
            "mean     17.413085  \n",
            "std       8.975143  \n",
            "min       1.000000  \n",
            "25%       8.000000  \n",
            "50%      19.000000  \n",
            "75%      26.000000  \n",
            "max      30.000000  \n",
            "\n",
            "[8 rows x 562 columns]\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "\n",
        "# Check for missing values\n",
        "print(\"Missing Values:\\n\", train_data.isnull().sum())"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "zmaDi8Mo0l-_",
        "outputId": "b47d586b-3772-48ca-a37b-d85a51823ea7"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Missing Values:\n",
            " tBodyAcc-mean()-X       0\n",
            "tBodyAcc-mean()-Y       0\n",
            "tBodyAcc-mean()-Z       0\n",
            "tBodyAcc-std()-X        0\n",
            "tBodyAcc-std()-Y        0\n",
            "                       ..\n",
            "angle(X,gravityMean)    0\n",
            "angle(Y,gravityMean)    0\n",
            "angle(Z,gravityMean)    0\n",
            "subject                 0\n",
            "Activity                0\n",
            "Length: 563, dtype: int64\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Check data types of each column\n",
        "print(\"Data Types:\\n\", train_data.dtypes)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "qXCLuFPw09Ve",
        "outputId": "40d46473-bad7-473e-ef6c-da7f759014f4"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Data Types:\n",
            " tBodyAcc-mean()-X       float64\n",
            "tBodyAcc-mean()-Y       float64\n",
            "tBodyAcc-mean()-Z       float64\n",
            "tBodyAcc-std()-X        float64\n",
            "tBodyAcc-std()-Y        float64\n",
            "                         ...   \n",
            "angle(X,gravityMean)    float64\n",
            "angle(Y,gravityMean)    float64\n",
            "angle(Z,gravityMean)    float64\n",
            "subject                   int64\n",
            "Activity                 object\n",
            "Length: 563, dtype: object\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "\n",
        "# Count the occurrences of each value in a specific column\n",
        "print(\"Value Counts:\\n\", train_data['fBodyAccJerk-meanFreq()-Z'].value_counts())"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "qN7DAVHY09Y-",
        "outputId": "5d5dbfce-a969-4a27-ee6c-f409489e93ab"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Value Counts:\n",
            "  0.263708    1\n",
            "-0.390866    1\n",
            "-0.526888    1\n",
            "-0.305739    1\n",
            "-0.278400    1\n",
            "            ..\n",
            "-0.051636    1\n",
            " 0.048196    1\n",
            " 0.168456    1\n",
            "-0.120088    1\n",
            "-0.663801    1\n",
            "Name: fBodyAccJerk-meanFreq()-Z, Length: 7352, dtype: int64\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Visualize the distribution of a numeric column (histogram)\n",
        "train_data['fBodyAccJerk-meanFreq()-Y'].hist()\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 447
        },
        "id": "ayjGJKPG09ez",
        "outputId": "c07acfb4-8ca0-4c84-e62f-f14cfff84522"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<Axes: >"
            ]
          },
          "metadata": {},
          "execution_count": 13
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Visualize the relationship between two numeric columns (scatter plot)\n",
        "train_data.plot.scatter(x='fBodyAccJerk-meanFreq()-Y', y='fBodyAccJerk-meanFreq()-Z')"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 469
        },
        "id": "z2ebs6Cb09hK",
        "outputId": "4dc22753-d45c-4fea-a1f7-bd9583e716d2"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<Axes: xlabel='fBodyAccJerk-meanFreq()-Y', ylabel='fBodyAccJerk-meanFreq()-Z'>"
            ]
          },
          "metadata": {},
          "execution_count": 14
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "\n",
        "# Visualize the relationship between a categorical column and a numeric column (box plot)\n",
        "train_data.boxplot(column='fBodyAccJerk-meanFreq()-Y', by='Activity')"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 495
        },
        "id": "QBjhFaOW09jS",
        "outputId": "3d631090-7634-4337-cb1b-f60b979a279d"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<Axes: title={'center': 'fBodyAccJerk-meanFreq()-Y'}, xlabel='Activity'>"
            ]
          },
          "metadata": {},
          "execution_count": 15
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Explore correlations between numeric columns (correlation matrix)\n",
        "correlation_matrix = train_data.corr()\n",
        "print(\"Correlation Matrix:\\n\", correlation_matrix)\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "P6h3eTIf09mA",
        "outputId": "97f8557c-c283-4170-d37a-5a409cf4ea78"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "<ipython-input-16-b3837a94bc57>:2: FutureWarning: The default value of numeric_only in DataFrame.corr is deprecated. In a future version, it will default to False. Select only valid columns or specify the value of numeric_only to silence this warning.\n",
            "  correlation_matrix = train_data.corr()\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Correlation Matrix:\n",
            "                                       tBodyAcc-mean()-X  tBodyAcc-mean()-Y  \\\n",
            "tBodyAcc-mean()-X                              1.000000           0.148061   \n",
            "tBodyAcc-mean()-Y                              0.148061           1.000000   \n",
            "tBodyAcc-mean()-Z                             -0.256952          -0.078769   \n",
            "tBodyAcc-std()-X                               0.000619          -0.045160   \n",
            "tBodyAcc-std()-Y                              -0.021903          -0.044920   \n",
            "...                                                 ...                ...   \n",
            "angle(tBodyGyroJerkMean,gravityMean)           0.028844           0.075679   \n",
            "angle(X,gravityMean)                          -0.035257          -0.005309   \n",
            "angle(Y,gravityMean)                           0.034371           0.001053   \n",
            "angle(Z,gravityMean)                           0.028242          -0.013903   \n",
            "subject                                        0.024181          -0.003144   \n",
            "\n",
            "                                      tBodyAcc-mean()-Z  tBodyAcc-std()-X  \\\n",
            "tBodyAcc-mean()-X                             -0.256952          0.000619   \n",
            "tBodyAcc-mean()-Y                             -0.078769         -0.045160   \n",
            "tBodyAcc-mean()-Z                              1.000000         -0.020217   \n",
            "tBodyAcc-std()-X                              -0.020217          1.000000   \n",
            "tBodyAcc-std()-Y                              -0.016641          0.927461   \n",
            "...                                                 ...               ...   \n",
            "angle(tBodyGyroJerkMean,gravityMean)          -0.034037         -0.024810   \n",
            "angle(X,gravityMean)                           0.008587         -0.371653   \n",
            "angle(Y,gravityMean)                          -0.015288          0.471065   \n",
            "angle(Z,gravityMean)                          -0.022643          0.394825   \n",
            "subject                                       -0.000637         -0.064345   \n",
            "\n",
            "                                      tBodyAcc-std()-Y  tBodyAcc-std()-Z  \\\n",
            "tBodyAcc-mean()-X                            -0.021903         -0.044617   \n",
            "tBodyAcc-mean()-Y                            -0.044920         -0.049746   \n",
            "tBodyAcc-mean()-Z                            -0.016641         -0.008410   \n",
            "tBodyAcc-std()-X                              0.927461          0.851668   \n",
            "tBodyAcc-std()-Y                              1.000000          0.895510   \n",
            "...                                                ...               ...   \n",
            "angle(tBodyGyroJerkMean,gravityMean)         -0.014592         -0.006471   \n",
            "angle(X,gravityMean)                         -0.380531         -0.345011   \n",
            "angle(Y,gravityMean)                          0.523600          0.476006   \n",
            "angle(Z,gravityMean)                          0.433169          0.482828   \n",
            "subject                                      -0.115524         -0.050123   \n",
            "\n",
            "                                      tBodyAcc-mad()-X  tBodyAcc-mad()-Y  \\\n",
            "tBodyAcc-mean()-X                             0.006290         -0.022754   \n",
            "tBodyAcc-mean()-Y                            -0.044180         -0.045049   \n",
            "tBodyAcc-mean()-Z                            -0.018747         -0.015203   \n",
            "tBodyAcc-std()-X                              0.998632          0.920888   \n",
            "tBodyAcc-std()-Y                              0.922803          0.997347   \n",
            "...                                                ...               ...   \n",
            "angle(tBodyGyroJerkMean,gravityMean)         -0.024951         -0.012341   \n",
            "angle(X,gravityMean)                         -0.368191         -0.377025   \n",
            "angle(Y,gravityMean)                          0.466424          0.525081   \n",
            "angle(Z,gravityMean)                          0.390922          0.431459   \n",
            "subject                                      -0.063440         -0.114753   \n",
            "\n",
            "                                      tBodyAcc-mad()-Z  tBodyAcc-max()-X  ...  \\\n",
            "tBodyAcc-mean()-X                            -0.047558          0.044062  ...   \n",
            "tBodyAcc-mean()-Y                            -0.050402         -0.038108  ...   \n",
            "tBodyAcc-mean()-Z                            -0.001988         -0.037197  ...   \n",
            "tBodyAcc-std()-X                              0.846392          0.980844  ...   \n",
            "tBodyAcc-std()-Y                              0.894509          0.917366  ...   \n",
            "...                                                ...               ...  ...   \n",
            "angle(tBodyGyroJerkMean,gravityMean)         -0.007231         -0.028871  ...   \n",
            "angle(X,gravityMean)                         -0.347389         -0.384192  ...   \n",
            "angle(Y,gravityMean)                          0.477607          0.480229  ...   \n",
            "angle(Z,gravityMean)                          0.479751          0.405023  ...   \n",
            "subject                                      -0.055457         -0.055633  ...   \n",
            "\n",
            "                                      fBodyBodyGyroJerkMag-skewness()  \\\n",
            "tBodyAcc-mean()-X                                           -0.017557   \n",
            "tBodyAcc-mean()-Y                                           -0.001587   \n",
            "tBodyAcc-mean()-Z                                            0.020091   \n",
            "tBodyAcc-std()-X                                             0.148034   \n",
            "tBodyAcc-std()-Y                                             0.206227   \n",
            "...                                                               ...   \n",
            "angle(tBodyGyroJerkMean,gravityMean)                        -0.017937   \n",
            "angle(X,gravityMean)                                        -0.086006   \n",
            "angle(Y,gravityMean)                                         0.086993   \n",
            "angle(Z,gravityMean)                                         0.057831   \n",
            "subject                                                     -0.049072   \n",
            "\n",
            "                                      fBodyBodyGyroJerkMag-kurtosis()  \\\n",
            "tBodyAcc-mean()-X                                           -0.015613   \n",
            "tBodyAcc-mean()-Y                                           -0.004459   \n",
            "tBodyAcc-mean()-Z                                            0.019127   \n",
            "tBodyAcc-std()-X                                             0.115565   \n",
            "tBodyAcc-std()-Y                                             0.176946   \n",
            "...                                                               ...   \n",
            "angle(tBodyGyroJerkMean,gravityMean)                        -0.014865   \n",
            "angle(X,gravityMean)                                        -0.079751   \n",
            "angle(Y,gravityMean)                                         0.078079   \n",
            "angle(Z,gravityMean)                                         0.052548   \n",
            "subject                                                     -0.043902   \n",
            "\n",
            "                                      angle(tBodyAccMean,gravity)  \\\n",
            "tBodyAcc-mean()-X                                       -0.544320   \n",
            "tBodyAcc-mean()-Y                                        0.070559   \n",
            "tBodyAcc-mean()-Z                                        0.052841   \n",
            "tBodyAcc-std()-X                                        -0.035011   \n",
            "tBodyAcc-std()-Y                                        -0.020379   \n",
            "...                                                           ...   \n",
            "angle(tBodyGyroJerkMean,gravityMean)                    -0.020823   \n",
            "angle(X,gravityMean)                                     0.011880   \n",
            "angle(Y,gravityMean)                                     0.001540   \n",
            "angle(Z,gravityMean)                                    -0.003069   \n",
            "subject                                                 -0.005087   \n",
            "\n",
            "                                      angle(tBodyAccJerkMean),gravityMean)  \\\n",
            "tBodyAcc-mean()-X                                                 0.012173   \n",
            "tBodyAcc-mean()-Y                                                -0.013541   \n",
            "tBodyAcc-mean()-Z                                                -0.039836   \n",
            "tBodyAcc-std()-X                                                 -0.021633   \n",
            "tBodyAcc-std()-Y                                                 -0.012505   \n",
            "...                                                                    ...   \n",
            "angle(tBodyGyroJerkMean,gravityMean)                              0.035263   \n",
            "angle(X,gravityMean)                                              0.023246   \n",
            "angle(Y,gravityMean)                                             -0.012990   \n",
            "angle(Z,gravityMean)                                             -0.017520   \n",
            "subject                                                           0.012510   \n",
            "\n",
            "                                      angle(tBodyGyroMean,gravityMean)  \\\n",
            "tBodyAcc-mean()-X                                             0.037444   \n",
            "tBodyAcc-mean()-Y                                             0.017967   \n",
            "tBodyAcc-mean()-Z                                            -0.063609   \n",
            "tBodyAcc-std()-X                                              0.018985   \n",
            "tBodyAcc-std()-Y                                             -0.008507   \n",
            "...                                                                ...   \n",
            "angle(tBodyGyroJerkMean,gravityMean)                         -0.116001   \n",
            "angle(X,gravityMean)                                         -0.005853   \n",
            "angle(Y,gravityMean)                                         -0.012313   \n",
            "angle(Z,gravityMean)                                         -0.019903   \n",
            "subject                                                      -0.005314   \n",
            "\n",
            "                                      angle(tBodyGyroJerkMean,gravityMean)  \\\n",
            "tBodyAcc-mean()-X                                                 0.028844   \n",
            "tBodyAcc-mean()-Y                                                 0.075679   \n",
            "tBodyAcc-mean()-Z                                                -0.034037   \n",
            "tBodyAcc-std()-X                                                 -0.024810   \n",
            "tBodyAcc-std()-Y                                                 -0.014592   \n",
            "...                                                                    ...   \n",
            "angle(tBodyGyroJerkMean,gravityMean)                              1.000000   \n",
            "angle(X,gravityMean)                                              0.023995   \n",
            "angle(Y,gravityMean)                                             -0.005869   \n",
            "angle(Z,gravityMean)                                             -0.005656   \n",
            "subject                                                           0.009340   \n",
            "\n",
            "                                      angle(X,gravityMean)  \\\n",
            "tBodyAcc-mean()-X                                -0.035257   \n",
            "tBodyAcc-mean()-Y                                -0.005309   \n",
            "tBodyAcc-mean()-Z                                 0.008587   \n",
            "tBodyAcc-std()-X                                 -0.371653   \n",
            "tBodyAcc-std()-Y                                 -0.380531   \n",
            "...                                                    ...   \n",
            "angle(tBodyGyroJerkMean,gravityMean)              0.023995   \n",
            "angle(X,gravityMean)                              1.000000   \n",
            "angle(Y,gravityMean)                             -0.783848   \n",
            "angle(Z,gravityMean)                             -0.643655   \n",
            "subject                                           0.026137   \n",
            "\n",
            "                                      angle(Y,gravityMean)  \\\n",
            "tBodyAcc-mean()-X                                 0.034371   \n",
            "tBodyAcc-mean()-Y                                 0.001053   \n",
            "tBodyAcc-mean()-Z                                -0.015288   \n",
            "tBodyAcc-std()-X                                  0.471065   \n",
            "tBodyAcc-std()-Y                                  0.523600   \n",
            "...                                                    ...   \n",
            "angle(tBodyGyroJerkMean,gravityMean)             -0.005869   \n",
            "angle(X,gravityMean)                             -0.783848   \n",
            "angle(Y,gravityMean)                              1.000000   \n",
            "angle(Z,gravityMean)                              0.594885   \n",
            "subject                                          -0.009829   \n",
            "\n",
            "                                      angle(Z,gravityMean)   subject  \n",
            "tBodyAcc-mean()-X                                 0.028242  0.024181  \n",
            "tBodyAcc-mean()-Y                                -0.013903 -0.003144  \n",
            "tBodyAcc-mean()-Z                                -0.022643 -0.000637  \n",
            "tBodyAcc-std()-X                                  0.394825 -0.064345  \n",
            "tBodyAcc-std()-Y                                  0.433169 -0.115524  \n",
            "...                                                    ...       ...  \n",
            "angle(tBodyGyroJerkMean,gravityMean)             -0.005656  0.009340  \n",
            "angle(X,gravityMean)                             -0.643655  0.026137  \n",
            "angle(Y,gravityMean)                              0.594885 -0.009829  \n",
            "angle(Z,gravityMean)                              1.000000 -0.098712  \n",
            "subject                                          -0.098712  1.000000  \n",
            "\n",
            "[562 rows x 562 columns]\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "\n",
        "# Load the preprocessed dataset\n",
        "data = pd.read_csv('datasetkaggle1.csv')"
      ],
      "metadata": {
        "id": "C3Qu6tpm09pe"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "print(data.columns)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "Y_SJQAZV424s",
        "outputId": "d6b80006-4a60-4a6b-ffd5-d5afd0db4091"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Index(['tBodyAcc-mean()-X', 'tBodyAcc-mean()-Y', 'tBodyAcc-mean()-Z',\n",
            "       'tBodyAcc-std()-X', 'tBodyAcc-std()-Y', 'tBodyAcc-std()-Z',\n",
            "       'tBodyAcc-mad()-X', 'tBodyAcc-mad()-Y', 'tBodyAcc-mad()-Z',\n",
            "       'tBodyAcc-max()-X',\n",
            "       ...\n",
            "       'fBodyBodyGyroJerkMag-kurtosis()', 'angle(tBodyAccMean,gravity)',\n",
            "       'angle(tBodyAccJerkMean),gravityMean)',\n",
            "       'angle(tBodyGyroMean,gravityMean)',\n",
            "       'angle(tBodyGyroJerkMean,gravityMean)', 'angle(X,gravityMean)',\n",
            "       'angle(Y,gravityMean)', 'angle(Z,gravityMean)', 'subject', 'Activity'],\n",
            "      dtype='object', length=563)\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Load the dataset\n",
        "data = pd.read_csv('datasetkaggle1.csv')"
      ],
      "metadata": {
        "id": "2wTWp3MW426r"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# Separate the features and target variable\n",
        "X = data.drop(['subject', 'Activity'], axis=1)\n",
        "y = data['Activity']"
      ],
      "metadata": {
        "id": "CE5QIuki428W"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# Perform preprocessing steps\n",
        "scaler = StandardScaler()\n",
        "X_scaled = scaler.fit_transform(X)\n"
      ],
      "metadata": {
        "id": "r7kCBTsd42-N"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "data = pd.read_csv('datasetkaggle1.csv')\n",
        "\n",
        "# Separate the features and target variable\n",
        "X = data.drop('Activity', axis=1)\n",
        "y = data['Activity']\n"
      ],
      "metadata": {
        "id": "Rk4v_eTRCt7a"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# Initialize the models\n",
        "decision_tree = DecisionTreeClassifier()\n",
        "random_forest = RandomForestClassifier()\n",
        "svm = SVC()\n",
        "knn = KNeighborsClassifier()\n"
      ],
      "metadata": {
        "id": "_GG47OZmCt-d"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)"
      ],
      "metadata": {
        "id": "4pU48MKpDDKn"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# Train the models\n",
        "decision_tree.fit(X_train, y_train)\n",
        "random_forest.fit(X_train, y_train)\n",
        "svm.fit(X_train, y_train)\n",
        "knn.fit(X_train, y_train)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 75
        },
        "id": "53vWUsa0CuB3",
        "outputId": "c5f9b0d5-6499-4bc2-c94c-7859f6554d93"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "KNeighborsClassifier()"
            ],
            "text/html": [
              "<style>#sk-container-id-1 {color: black;background-color: white;}#sk-container-id-1 pre{padding: 0;}#sk-container-id-1 div.sk-toggleable {background-color: white;}#sk-container-id-1 label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-container-id-1 label.sk-toggleable__label-arrow:before {content: \"▸\";float: left;margin-right: 0.25em;color: #696969;}#sk-container-id-1 label.sk-toggleable__label-arrow:hover:before {color: black;}#sk-container-id-1 div.sk-estimator:hover label.sk-toggleable__label-arrow:before {color: black;}#sk-container-id-1 div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-container-id-1 div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-container-id-1 input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-container-id-1 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {content: \"▾\";}#sk-container-id-1 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-1 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-1 input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-container-id-1 div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-container-id-1 div.sk-estimator:hover {background-color: #d4ebff;}#sk-container-id-1 div.sk-parallel-item::after {content: \"\";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-container-id-1 div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-1 div.sk-serial::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: 0;}#sk-container-id-1 div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;position: relative;}#sk-container-id-1 div.sk-item {position: relative;z-index: 1;}#sk-container-id-1 div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;position: relative;}#sk-container-id-1 div.sk-item::before, #sk-container-id-1 div.sk-parallel-item::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: -1;}#sk-container-id-1 div.sk-parallel-item {display: flex;flex-direction: column;z-index: 1;position: relative;background-color: white;}#sk-container-id-1 div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-container-id-1 div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-container-id-1 div.sk-parallel-item:only-child::after {width: 0;}#sk-container-id-1 div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;}#sk-container-id-1 div.sk-label label {font-family: monospace;font-weight: bold;display: inline-block;line-height: 1.2em;}#sk-container-id-1 div.sk-label-container {text-align: center;}#sk-container-id-1 div.sk-container {/* jupyter's `normalize.less` sets `[hidden] { display: none; }` but bootstrap.min.css set `[hidden] { display: none !important; }` so we also need the `!important` here to be able to override the default hidden behavior on the sphinx rendered scikit-learn.org. See: https://github.com/scikit-learn/scikit-learn/issues/21755 */display: inline-block !important;position: relative;}#sk-container-id-1 div.sk-text-repr-fallback {display: none;}</style><div id=\"sk-container-id-1\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>KNeighborsClassifier()</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-1\" type=\"checkbox\" checked><label for=\"sk-estimator-id-1\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">KNeighborsClassifier</label><div class=\"sk-toggleable__content\"><pre>KNeighborsClassifier()</pre></div></div></div></div></div>"
            ]
          },
          "metadata": {},
          "execution_count": 28
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Make predictions on the testing data\n",
        "y_pred_dt = decision_tree.predict(X_test)\n",
        "y_pred_rf = random_forest.predict(X_test)\n",
        "y_pred_svm = svm.predict(X_test)\n",
        "y_pred_knn = knn.predict(X_test)"
      ],
      "metadata": {
        "id": "MGj4yoUbCuDR"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# Evaluate model performance\n",
        "accuracy_dt = accuracy_score(y_test, y_pred_dt)\n",
        "accuracy_rf = accuracy_score(y_test, y_pred_rf)\n",
        "accuracy_svm = accuracy_score(y_test, y_pred_svm)\n",
        "accuracy_knn = accuracy_score(y_test, y_pred_knn)"
      ],
      "metadata": {
        "id": "E8BwBxZVCuFf"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "print(\"Decision Tree Accuracy:\", accuracy_dt)\n",
        "print(\"Random Forest Accuracy:\", accuracy_rf)\n",
        "print(\"SVM Accuracy:\", accuracy_svm)\n",
        "print(\"KNN Accuracy:\", accuracy_knn)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "YecN-DgpCuHR",
        "outputId": "d6197f7f-dd26-4440-e1de-f2525e3e1f82"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Decision Tree Accuracy: 0.9449354180829368\n",
            "Random Forest Accuracy: 0.9830047586675731\n",
            "SVM Accuracy: 0.9537729435757988\n",
            "KNN Accuracy: 0.9707681849082257\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Train and evaluate the models\n",
        "models = [decision_tree, random_forest, svm, knn]\n",
        "model_names = ['Decision Tree', 'Random Forest', 'SVM', 'KNN']"
      ],
      "metadata": {
        "id": "C38kK2GKCuJx"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "for model, name in zip(models, model_names):\n",
        "    # Train the model\n",
        "    model.fit(X, y)\n",
        "\n",
        "    # Make predictions\n",
        "    y_pred = model.predict(X)\n",
        "\n",
        "    # Calculate accuracy\n",
        "    accuracy = accuracy_score(y, y_pred)\n",
        "    print(f\"{name} Accuracy: {accuracy}\")\n",
        "\n",
        "    # Calculate cross-validation scores\n",
        "    cv_scores = cross_val_score(model, X, y, cv=5)\n",
        "    print(f\"{name} Cross-Validation Scores: {cv_scores}\")\n",
        "    print(f\"{name} Mean Cross-Validation Score: {cv_scores.mean()}\\n\")\n",
        "\n",
        "    # Generate classification report for model interpretation\n",
        "    classification_rep = classification_report(y, y_pred)\n",
        "    print(f\"{name} Classification Report:\\n{classification_rep}\\n\")"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "DHfOaSYjH8E6",
        "outputId": "7ba6a835-61e7-4b26-8f10-977ee5742b2e"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Decision Tree Accuracy: 1.0\n",
            "Decision Tree Cross-Validation Scores: [0.80557444 0.81917063 0.81360544 0.88571429 0.88639456]\n",
            "Decision Tree Mean Cross-Validation Score: 0.8420918714188599\n",
            "\n",
            "Decision Tree Classification Report:\n",
            "                    precision    recall  f1-score   support\n",
            "\n",
            "            LAYING       1.00      1.00      1.00      1407\n",
            "           SITTING       1.00      1.00      1.00      1286\n",
            "          STANDING       1.00      1.00      1.00      1374\n",
            "           WALKING       1.00      1.00      1.00      1226\n",
            "WALKING_DOWNSTAIRS       1.00      1.00      1.00       986\n",
            "  WALKING_UPSTAIRS       1.00      1.00      1.00      1073\n",
            "\n",
            "          accuracy                           1.00      7352\n",
            "         macro avg       1.00      1.00      1.00      7352\n",
            "      weighted avg       1.00      1.00      1.00      7352\n",
            "\n",
            "\n",
            "Random Forest Accuracy: 1.0\n",
            "Random Forest Cross-Validation Scores: [0.91094494 0.89530931 0.91564626 0.92857143 0.94897959]\n",
            "Random Forest Mean Cross-Validation Score: 0.9198903055443797\n",
            "\n",
            "Random Forest Classification Report:\n",
            "                    precision    recall  f1-score   support\n",
            "\n",
            "            LAYING       1.00      1.00      1.00      1407\n",
            "           SITTING       1.00      1.00      1.00      1286\n",
            "          STANDING       1.00      1.00      1.00      1374\n",
            "           WALKING       1.00      1.00      1.00      1226\n",
            "WALKING_DOWNSTAIRS       1.00      1.00      1.00       986\n",
            "  WALKING_UPSTAIRS       1.00      1.00      1.00      1073\n",
            "\n",
            "          accuracy                           1.00      7352\n",
            "         macro avg       1.00      1.00      1.00      7352\n",
            "      weighted avg       1.00      1.00      1.00      7352\n",
            "\n",
            "\n",
            "SVM Accuracy: 0.9581066376496191\n",
            "SVM Cross-Validation Scores: [0.86879674 0.84568321 0.89183673 0.92108844 0.89931973]\n",
            "SVM Mean Cross-Validation Score: 0.8853449687148824\n",
            "\n",
            "SVM Classification Report:\n",
            "                    precision    recall  f1-score   support\n",
            "\n",
            "            LAYING       0.99      1.00      1.00      1407\n",
            "           SITTING       0.91      0.86      0.89      1286\n",
            "          STANDING       0.88      0.92      0.90      1374\n",
            "           WALKING       0.99      1.00      0.99      1226\n",
            "WALKING_DOWNSTAIRS       1.00      0.99      0.99       986\n",
            "  WALKING_UPSTAIRS       0.99      0.99      0.99      1073\n",
            "\n",
            "          accuracy                           0.96      7352\n",
            "         macro avg       0.96      0.96      0.96      7352\n",
            "      weighted avg       0.96      0.96      0.96      7352\n",
            "\n",
            "\n",
            "KNN Accuracy: 0.9889825897714908\n",
            "KNN Cross-Validation Scores: [0.74847043 0.75186948 0.78367347 0.84965986 0.87687075]\n",
            "KNN Mean Cross-Validation Score: 0.8021087972918604\n",
            "\n",
            "KNN Classification Report:\n",
            "                    precision    recall  f1-score   support\n",
            "\n",
            "            LAYING       1.00      1.00      1.00      1407\n",
            "           SITTING       0.98      0.96      0.97      1286\n",
            "          STANDING       0.96      0.98      0.97      1374\n",
            "           WALKING       1.00      1.00      1.00      1226\n",
            "WALKING_DOWNSTAIRS       1.00      1.00      1.00       986\n",
            "  WALKING_UPSTAIRS       1.00      1.00      1.00      1073\n",
            "\n",
            "          accuracy                           0.99      7352\n",
            "         macro avg       0.99      0.99      0.99      7352\n",
            "      weighted avg       0.99      0.99      0.99      7352\n",
            "\n",
            "\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Initialize and train the selected model\n",
        "model = DecisionTreeClassifier()\n",
        "model.fit(X_train, y_train)\n",
        "\n",
        "# Save the trained model to a file\n",
        "joblib.dump(model, 'trained_model.pkl')"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "IVLXoPICKFeR",
        "outputId": "6fbc4329-8936-48a1-ec88-f4821367ef1b"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "['trained_model.pkl']"
            ]
          },
          "metadata": {},
          "execution_count": 35
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Calculate the z-score for each feature\n",
        "z_scores = stats.zscore(X)\n",
        "z_scores_df = pd.DataFrame(z_scores, columns=X.columns)\n",
        "print(\"Z-Scores:\\n\", z_scores_df)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "c6Eb6YtqKFm7",
        "outputId": "0839468a-f20c-4994-adb8-2fb5d66632f8"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Z-Scores:\n",
            "       tBodyAcc-mean()-X  tBodyAcc-mean()-Y  tBodyAcc-mean()-Z  \\\n",
            "0              0.200642          -0.063683          -0.419628   \n",
            "1              0.055948           0.031486          -0.253908   \n",
            "2              0.073515          -0.043416          -0.076295   \n",
            "3              0.066696          -0.208422          -0.249712   \n",
            "4              0.030469           0.027587          -0.109848   \n",
            "...                 ...                ...                ...   \n",
            "7347           0.358361          -0.967904          -1.273005   \n",
            "7348          -0.009044           0.243731          -0.676787   \n",
            "7349          -0.015668           0.016781           1.132221   \n",
            "7350           0.215866          -0.028123          -0.867710   \n",
            "7351           1.096202           0.129199          -1.672681   \n",
            "\n",
            "      tBodyAcc-std()-X  tBodyAcc-std()-Y  tBodyAcc-std()-Z  tBodyAcc-mad()-X  \\\n",
            "0            -0.868814         -0.939441         -0.737529         -0.859817   \n",
            "1            -0.875426         -0.923902         -0.849304         -0.868531   \n",
            "2            -0.869039         -0.907760         -0.893785         -0.863137   \n",
            "3            -0.870626         -0.940022         -0.921805         -0.864503   \n",
            "4            -0.875188         -0.934878         -0.921343         -0.867384   \n",
            "...                ...               ...               ...               ...   \n",
            "7347          0.913859          1.095963          1.628612          0.821169   \n",
            "7348          0.824887          1.026150          1.586100          0.726245   \n",
            "7349          0.862975          0.810002          2.100249          0.768781   \n",
            "7350          0.860922          0.794902          2.086778          0.754697   \n",
            "7351          0.749198          0.843051          1.868249          0.596891   \n",
            "\n",
            "      tBodyAcc-mad()-Y  tBodyAcc-mad()-Z  tBodyAcc-max()-X  ...  \\\n",
            "0            -0.939019         -0.766437         -0.856036  ...   \n",
            "1            -0.921998         -0.848928         -0.871359  ...   \n",
            "2            -0.898854         -0.896701         -0.863323  ...   \n",
            "3            -0.938124         -0.925279         -0.863323  ...   \n",
            "4            -0.931789         -0.928028         -0.870260  ...   \n",
            "...                ...               ...               ...  ...   \n",
            "7347          1.174137          1.609686          1.247727  ...   \n",
            "7348          1.023755          1.658407          1.076279  ...   \n",
            "7349          0.880813          2.266963          0.941403  ...   \n",
            "7350          0.944019          2.235301          1.047375  ...   \n",
            "7351          1.004776          2.017853          1.354644  ...   \n",
            "\n",
            "      fBodyBodyGyroJerkMag-skewness()  fBodyBodyGyroJerkMag-kurtosis()  \\\n",
            "0                            0.025960                        -0.276399   \n",
            "1                           -0.897357                        -0.767990   \n",
            "2                           -0.260878                        -0.438316   \n",
            "3                            0.591045                         0.463155   \n",
            "4                           -0.138515                        -0.240313   \n",
            "...                               ...                              ...   \n",
            "7347                        -0.876738                        -0.829197   \n",
            "7348                        -0.260847                        -0.180290   \n",
            "7349                         1.034784                         1.044548   \n",
            "7350                         1.155541                         0.913569   \n",
            "7351                        -0.249363                        -0.375352   \n",
            "\n",
            "      angle(tBodyAccMean,gravity)  angle(tBodyAccJerkMean),gravityMean)  \\\n",
            "0                       -0.360603                              0.062940   \n",
            "1                        0.133011                             -0.021461   \n",
            "2                       -0.377840                              0.391976   \n",
            "3                       -0.135025                             -0.033637   \n",
            "4                        0.340406                              0.268486   \n",
            "...                           ...                                   ...   \n",
            "7347                    -0.591277                              1.846034   \n",
            "7348                     0.166951                              1.948561   \n",
            "7349                     0.131018                             -0.599877   \n",
            "7350                    -0.326769                              1.558312   \n",
            "7351                    -0.857491                             -0.022141   \n",
            "\n",
            "      angle(tBodyGyroMean,gravityMean)  angle(tBodyGyroJerkMean,gravityMean)  \\\n",
            "0                            -0.778427                             -0.026080   \n",
            "1                            -1.218805                              1.484470   \n",
            "2                             0.151207                              1.704201   \n",
            "3                             1.037851                             -1.003019   \n",
            "4                             1.125918                             -1.276282   \n",
            "...                                ...                                   ...   \n",
            "7347                          0.325923                             -0.878008   \n",
            "7348                         -1.459501                              0.849894   \n",
            "7349                          1.406760                              1.479571   \n",
            "7350                          1.525574                             -1.220854   \n",
            "7351                         -0.106555                             -1.278345   \n",
            "\n",
            "      angle(X,gravityMean)  angle(Y,gravityMean)  angle(Z,gravityMean)  \\\n",
            "0                -0.687219              0.407946             -0.007568   \n",
            "1                -0.694138              0.409117              0.007875   \n",
            "2                -0.702239              0.410288              0.026502   \n",
            "3                -0.701684              0.414650              0.031714   \n",
            "4                -0.700152              0.425463              0.045225   \n",
            "...                    ...                   ...                   ...   \n",
            "7347             -0.590763              0.605162              0.380984   \n",
            "7348             -0.551598              0.652468              0.381820   \n",
            "7349             -0.565848              0.640597              0.348709   \n",
            "7350             -0.577668              0.631478              0.293276   \n",
            "7351             -0.573927              0.632743              0.333961   \n",
            "\n",
            "       subject  \n",
            "0    -1.828851  \n",
            "1    -1.828851  \n",
            "2    -1.828851  \n",
            "3    -1.828851  \n",
            "4    -1.828851  \n",
            "...        ...  \n",
            "7347  1.402515  \n",
            "7348  1.402515  \n",
            "7349  1.402515  \n",
            "7350  1.402515  \n",
            "7351  1.402515  \n",
            "\n",
            "[7352 rows x 562 columns]\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Calculate the F-score for each feature\n",
        "f_scores, p_values = f_classif(X, y)\n",
        "\n",
        "# Create a DataFrame to store the F-scores and p-values\n",
        "f_scores_df = pd.DataFrame({'Feature': X.columns, 'F-Score': f_scores, 'p-value': p_values})\n",
        "\n",
        "# Sort the DataFrame by F-Score in descending order\n",
        "f_scores_df.sort_values(by='F-Score', ascending=False, inplace=True)\n",
        "\n",
        "# Display the F-scores and p-values\n",
        "print(f_scores_df)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "FSI9kOwDOg4H",
        "outputId": "1ee2e4b3-2107-459f-b136-9dcb3e5bdc6f"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "                                  Feature       F-Score   p-value\n",
            "366              fBodyAccJerk-entropy()-X  36918.103883  0.000000\n",
            "40                   tGravityAcc-mean()-X  29362.642369  0.000000\n",
            "52                    tGravityAcc-min()-X  28175.402833  0.000000\n",
            "367              fBodyAccJerk-entropy()-Y  28115.915817  0.000000\n",
            "49                    tGravityAcc-max()-X  26686.804095  0.000000\n",
            "..                                    ...           ...       ...\n",
            "161                tBodyGyroJerk-mean()-Y      1.935522  0.085042\n",
            "555  angle(tBodyAccJerkMean),gravityMean)      1.390154  0.224468\n",
            "80                  tBodyAccJerk-mean()-X      0.802546  0.547624\n",
            "81                  tBodyAccJerk-mean()-Y      0.625930  0.680010\n",
            "82                  tBodyAccJerk-mean()-Z      0.241001  0.944382\n",
            "\n",
            "[562 rows x 3 columns]\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [],
      "metadata": {
        "id": "qM_nnU2bOhFb"
      },
      "execution_count": null,
      "outputs": []
    }
  ]
}